import logging
import json
import os
from fastapi import FastAPI, Request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7880774464:AAGBEe1pYDmT-NzWvVgKJBfyrCfj7mLSu8A"
WEBHOOK_URL = "https://basket-weaving-bot.onrender.com/webhook"
PORT = 10000

app = FastAPI()
bot = Application.builder().token(TOKEN).build()
if os.path.exists("users.json"):
    with open("users.json", "r") as f:
        started_users = set(json.load(f))
else:
    started_users = set()
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏)
started_users = set()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(user_id: int):
    buttons = [
        [KeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞")]
    ]
    
    if user_id in started_users:
        buttons.insert(1, [KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")])
    
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üëã\nüåøüß∫–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç!\n\n"
        "‚ÅâÔ∏è–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏!\n"
        "üí™üèª–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–∏—Ç—å—Å—è –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –≤–µ—â–∏ –≤–º–µ—Å—Ç–µ!üòä",
        reply_markup=get_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    
    responses = {
        "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ": ("üöÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.", True),
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ": ("üîÅ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Ä–æ–∫...", False),
        "–ú–∞–≥–∞–∑–∏–Ω": ("üõçÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω...", False),
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞": ("üìö –ö—É—Ä—Å –ø–æ –ø–ª–µ—Ç–µ–Ω–∏—é –∫–æ—Ä–∑–∏–Ω!\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...", False)
    }
    
    if text in responses:
        response_text, should_start = responses[text]
        if text == "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ":
            started_users.add(user_id)
        await update.message.reply_text(response_text, reply_markup=get_keyboard(user_id))
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –í–µ–±—Ö—É–∫ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, bot.bot)
        await bot.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return {"status": "error"}

@app.on_event("startup")
async def init():
    await bot.initialize()
    await bot.bot.set_webhook(WEBHOOK_URL)
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(MessageHandler(filters.TEXT, handle_message))
    await bot.start()

@app.on_event("shutdown")
async def shutdown():
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    with open("users.json", "w") as f:
        json.dump(list(started_users), f)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await bot.stop()
    await bot.shutdown()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)