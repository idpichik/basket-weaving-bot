import logging
from fastapi import FastAPI, Request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7880774464:AAGBEe1pYDmT-NzWvVgKJBfyrCfj7mLSu8A"
WEBHOOK_URL = "https://basket-weaving-bot.onrender.com/webhook"
PORT = 10000

app = FastAPI()
bot = Application.builder().token(TOKEN).build()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞")]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üëã\nüåøüß∫–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–ª–µ—Ç–µ–Ω–∏—é –∫–æ—Ä–∑–∏–Ω. –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø–æ—à–∞–≥–æ–≤—ã–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –±—ã–ª –ø—Ä–æ—Å—Ç—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º.\n‚ÅâÔ∏è–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\nüí™üèª–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–∏—Ç—å—Å—è –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –≤–µ—â–∏ –≤–º–µ—Å—Ç–µ!üòä",
        reply_markup=get_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    response = {
        "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ": "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ!",
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ": "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Ä–æ–∫...",
        "–ú–∞–≥–∞–∑–∏–Ω": "üõçÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω...",
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞": "üìö –ö—É—Ä—Å –ø–æ –ø–ª–µ—Ç–µ–Ω–∏—é –∫–æ—Ä–∑–∏–Ω!"
    }.get(text, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    await update.message.reply_text(response)

# –í–µ–±—Ö—É–∫
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, bot.bot)
        await bot.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return {"status": "error"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
@app.on_event("startup")
async def init():
    await bot.initialize()
    await bot.bot.set_webhook(WEBHOOK_URL)
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(MessageHandler(filters.TEXT, handle_message))
    await bot.start()

@app.on_event("shutdown")
async def shutdown():
    await bot.stop()
    await bot.shutdown()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)